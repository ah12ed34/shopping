// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shopping.Models;

#nullable disable

namespace shopping.Migrations
{
    [DbContext(typeof(shoppingContext))]
    [Migration("20230317144756_fixDate")]
    partial class fixDate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MemberRole", b =>
                {
                    b.Property<int>("IdM")
                        .HasColumnType("int");

                    b.Property<int>("IdR")
                        .HasColumnType("int");

                    b.HasKey("IdM", "IdR");

                    b.ToTable("MemberRole");
                });

            modelBuilder.Entity("RolesM", b =>
                {
                    b.Property<int>("IdR")
                        .HasColumnType("int");

                    b.Property<int>("IdM")
                        .HasColumnType("int");

                    b.HasKey("IdR", "IdM")
                        .HasName("PK_roles");

                    b.HasIndex("IdM");

                    b.ToTable("RolesM", (string)null);
                });

            modelBuilder.Entity("shopping.Models.CommentMer", b =>
                {
                    b.Property<int>("IdMer")
                        .HasColumnType("int")
                        .HasColumnName("Id_mer");

                    b.Property<int>("IdMember")
                        .HasColumnType("int")
                        .HasColumnName("Id_member");

                    b.Property<string>("Comment")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("comment");

                    b.Property<decimal?>("Star")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("star");

                    b.HasKey("IdMer", "IdMember");

                    b.HasIndex("IdMember");

                    b.ToTable("Comment_Mer");
                });

            modelBuilder.Entity("shopping.Models.CommentProduct", b =>
                {
                    b.Property<int>("IdPro")
                        .HasColumnType("int")
                        .HasColumnName("Id_Pro");

                    b.Property<int>("IdMember")
                        .HasColumnType("int")
                        .HasColumnName("Id_member");

                    b.Property<string>("Comment")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("comment");

                    b.Property<decimal?>("Star")
                        .HasColumnType("numeric(1,0)")
                        .HasColumnName("star");

                    b.HasKey("IdPro", "IdMember");

                    b.HasIndex("IdMember");

                    b.ToTable("Comment_product");
                });

            modelBuilder.Entity("shopping.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fname");

                    b.Property<DateTime?>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("join_date")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime?>("LestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lest_date");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("lname");

                    b.Property<string>("Mname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("mname");

                    b.Property<DateTime?>("PassLestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("pass_lest_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("numeric(15,0)");

                    b.Property<string>("Profile")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("profile");

                    b.Property<int?>("TypeUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_user")
                        .HasDefaultValueSql("((100))");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("members");
                });

            modelBuilder.Entity("shopping.Models.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double?>("Earning")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("earning")
                        .HasDefaultValueSql("((0.03))");

                    b.Property<bool?>("IsActvity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_actvity")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Locaction")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("locaction");

                    b.Property<double?>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("tax")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TradeName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Trade_Name");

                    b.HasKey("Id");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("shopping.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AccessTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Access_time");

                    b.Property<DateTime?>("DateOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_order")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("DeliveryLocation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("delivery_location");

                    b.Property<DateTime?>("ExpectedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("expected_time");

                    b.Property<int>("IdMember")
                        .HasColumnType("int")
                        .HasColumnName("id_member");

                    b.Property<bool?>("IsDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_delivery")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("IdMember");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("shopping.Models.OrderDaitel", b =>
                {
                    b.Property<int>("IdOrder")
                        .HasColumnType("int")
                        .HasColumnName("Id_order");

                    b.Property<int>("IdPro")
                        .HasColumnType("int")
                        .HasColumnName("Id_pro");

                    b.Property<double?>("Earning")
                        .HasColumnType("float")
                        .HasColumnName("earning");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.HasKey("IdOrder", "IdPro");

                    b.HasIndex("IdPro");

                    b.ToTable("orderDaitels");
                });

            modelBuilder.Entity("shopping.Models.Prodect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("HomeImg")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("home_img");

                    b.Property<int>("IdMer")
                        .HasColumnType("int")
                        .HasColumnName("Id_mer");

                    b.Property<string>("Img1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img1");

                    b.Property<string>("Img10")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img10");

                    b.Property<string>("Img2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img2");

                    b.Property<string>("Img3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img3");

                    b.Property<string>("Img4")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img4");

                    b.Property<string>("Img5")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img5");

                    b.Property<string>("Img6")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img6");

                    b.Property<string>("Img7")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img7");

                    b.Property<string>("Img8")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img8");

                    b.Property<string>("Img9")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("img9");

                    b.Property<bool?>("IsPublishing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("is_Publishing")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("video_url");

                    b.HasKey("Id");

                    b.HasIndex("IdMer");

                    b.ToTable("prodects");
                });

            modelBuilder.Entity("shopping.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RolesM", b =>
                {
                    b.HasOne("shopping.Models.Member", null)
                        .WithMany()
                        .HasForeignKey("IdM")
                        .IsRequired()
                        .HasConstraintName("FK_IdM_roles");

                    b.HasOne("shopping.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("IdR")
                        .IsRequired()
                        .HasConstraintName("FK_Idr_roles");
                });

            modelBuilder.Entity("shopping.Models.CommentMer", b =>
                {
                    b.HasOne("shopping.Models.Member", "IdMemberNavigation")
                        .WithMany("CommentMers")
                        .HasForeignKey("IdMember")
                        .IsRequired()
                        .HasConstraintName("FK_mem_Comment_Mer");

                    b.HasOne("shopping.Models.Merchant", "IdMerNavigation")
                        .WithMany("CommentMers")
                        .HasForeignKey("IdMer")
                        .IsRequired()
                        .HasConstraintName("FK_mer_Comment_Mer");

                    b.Navigation("IdMemberNavigation");

                    b.Navigation("IdMerNavigation");
                });

            modelBuilder.Entity("shopping.Models.CommentProduct", b =>
                {
                    b.HasOne("shopping.Models.Member", "IdMemberNavigation")
                        .WithMany("CommentProducts")
                        .HasForeignKey("IdMember")
                        .IsRequired()
                        .HasConstraintName("FK_mem_Comment_product");

                    b.HasOne("shopping.Models.Prodect", "IdProNavigation")
                        .WithMany("CommentProducts")
                        .HasForeignKey("IdPro")
                        .IsRequired()
                        .HasConstraintName("FK_Pro_Comment_product");

                    b.Navigation("IdMemberNavigation");

                    b.Navigation("IdProNavigation");
                });

            modelBuilder.Entity("shopping.Models.Merchant", b =>
                {
                    b.HasOne("shopping.Models.Member", "IdNavigation")
                        .WithOne("Merchant")
                        .HasForeignKey("shopping.Models.Merchant", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Merchants");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("shopping.Models.Order", b =>
                {
                    b.HasOne("shopping.Models.Member", "IdMemberNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdMember")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdMemberNavigation");
                });

            modelBuilder.Entity("shopping.Models.OrderDaitel", b =>
                {
                    b.HasOne("shopping.Models.Order", "IdOrderNavigation")
                        .WithMany("OrderDaitels")
                        .HasForeignKey("IdOrder")
                        .IsRequired()
                        .HasConstraintName("FK_order_orderDaitels");

                    b.HasOne("shopping.Models.Prodect", "IdProNavigation")
                        .WithMany("OrderDaitels")
                        .HasForeignKey("IdPro")
                        .IsRequired()
                        .HasConstraintName("FK_prodect_orderDaitels");

                    b.Navigation("IdOrderNavigation");

                    b.Navigation("IdProNavigation");
                });

            modelBuilder.Entity("shopping.Models.Prodect", b =>
                {
                    b.HasOne("shopping.Models.Merchant", "IdMerNavigation")
                        .WithMany("Prodects")
                        .HasForeignKey("IdMer")
                        .IsRequired()
                        .HasConstraintName("FK_mer_prodects");

                    b.Navigation("IdMerNavigation");
                });

            modelBuilder.Entity("shopping.Models.Member", b =>
                {
                    b.Navigation("CommentMers");

                    b.Navigation("CommentProducts");

                    b.Navigation("Merchant");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("shopping.Models.Merchant", b =>
                {
                    b.Navigation("CommentMers");

                    b.Navigation("Prodects");
                });

            modelBuilder.Entity("shopping.Models.Order", b =>
                {
                    b.Navigation("OrderDaitels");
                });

            modelBuilder.Entity("shopping.Models.Prodect", b =>
                {
                    b.Navigation("CommentProducts");

                    b.Navigation("OrderDaitels");
                });
#pragma warning restore 612, 618
        }
    }
}
